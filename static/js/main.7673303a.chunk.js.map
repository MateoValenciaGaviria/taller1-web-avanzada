{"version":3,"sources":["utils/getImageSrcFromType.tsx","components/MapTerrain/MapTerrain.tsx","containers/Display/Display.tsx","components/MatrixButton/MatrixButton.tsx","components/Matrix/Matrix.tsx","components/Map/Map.tsx","components/Boss/Boss.tsx","components/ElementFeatures/ElementFeatures.tsx","components/Elements/Elements.tsx","containers/Settings/Settings.tsx","containers/App/App.tsx","fonts/pixeldigivolve/pixeldigivolve.otf","index.tsx"],"names":["baseExtension","process","getImageSrcFromType","url","MapTerrain","rows","columns","index","type","visibility","iconSrc","color2","grass1Src","dirt1Src","grass2Src","dirt2Src","elementIconSrc","motion","div","whileHover","y","whileTap","initial","scale","animate","exit","transition","ease","duration","className","src","alt","Display","terrains","displayBgImgSrc","style","gridTemplateColumns","gridTemplateRows","map","MatrixButton","globalBossIndex","globalPotionIndex","globalShieldIndex","globalSwordIndex","currentValue","onClick","React","useState","activeLink","setactiveLink","value","Matrix","onMatrixClick","buttons","i","newButton","push","Map","mapType","onRowsDecrease","onRowsIncrease","onColumnDecrease","onColumnIncrease","onMatrixChange","onVisibilityChange","onTerrainTypeChange","leftarrowImgSrc","rightarrowImgSrc","greenTerrainImgSrc","blueTerrainImgSrc","redTerrainImgSrc","pinkTerrainImgSrc","button","onChange","Boss","bossType","onBossPositionChange","onBossTypeChange","leftArrowImgSrc","rightArrowImgSrc","bossSettingsImgSrc","setBossSettingsImgSrc","bossIconSrc","setbossIconSrc","useEffect","console","log","ElementFeatures","onElementVisibilityChange","Elements","potion","shield","sword","onPotionIndexChange","onShieldIndexChange","onSwordIndexChange","potionimageSrc","shieldimageSrc","swordimageSrc","to","from","exact","path","render","Settings","globalBossType","onBossIndexChange","terrainIconSrc","potionIconSrc","opacity","bossColor","initialMap","App","setRows","setColumns","setTerrains","globalTerrainType","setglobalTerrainType","setglobalBossType","setGlobalBossIndex","setGlobalPotionIndex","setGlobalShieldIndex","setGlobalSwordIndex","handleOnMatrixChange","temporalTerrain","indexTerrain","currentIconSrc","newTerrain","handleIconChange","terrainIndex","findIndex","terrain","currentMap","slice","j","length","k","mainBg","AnimatePresence","exitBeforeEnter","basename","numberType","ReactDOM","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.7673303a.chunk.js","sourcesContent":["const baseExtension = `${process.env.PUBLIC_URL}/images/file_extensions/`;\r\n\r\nexport const getImageSrcFromType = (url: string = '') => {\r\n    return `${baseExtension}${url}.png`;\r\n}","import React from 'react';\r\nimport { motion } from \"framer-motion\"\r\nimport { getImageSrcFromType } from '../../utils/getImageSrcFromType';\r\nimport './MapTerrain.css';\r\n\r\ninterface MapTerrainProps{\r\n    rows: number,\r\n    columns: number,\r\n    index: number,\r\n    type: number,\r\n    visibility: boolean,\r\n    iconSrc: string,\r\n}\r\n\r\nexport const MapTerrain: React.FC<MapTerrainProps> = ({ rows, columns, index, type, visibility, iconSrc }) => {\r\n\r\n    var color2 = false;\r\n\r\n    var grass1Src = getImageSrcFromType(\"terrain/greengrass1\");\r\n    var dirt1Src = getImageSrcFromType(\"terrain/greendirt1\");\r\n\r\n    var grass2Src = getImageSrcFromType(\"terrain/greengrass2\");\r\n    var dirt2Src = getImageSrcFromType(\"terrain/greendirt2\");\r\n\r\n    var elementIconSrc = getImageSrcFromType(iconSrc);\r\n    \r\n    switch (type) {\r\n        case 0:\r\n            grass1Src = getImageSrcFromType(\"terrain/greengrass1\");\r\n            dirt1Src = getImageSrcFromType(\"terrain/greendirt1\");\r\n            grass2Src = getImageSrcFromType(\"terrain/greengrass2\");\r\n            dirt2Src = getImageSrcFromType(\"terrain/greendirt2\");\r\n            break;\r\n        case 1:\r\n            grass1Src = getImageSrcFromType(\"terrain/bluegrass1\");\r\n            dirt1Src = getImageSrcFromType(\"terrain/bluedirt1\");\r\n            grass2Src = getImageSrcFromType(\"terrain/bluegrass2\");\r\n            dirt2Src = getImageSrcFromType(\"terrain/bluedirt2\");\r\n            break;    \r\n        case 2:\r\n            grass1Src = getImageSrcFromType(\"terrain/redgrass1\");\r\n            dirt1Src = getImageSrcFromType(\"terrain/reddirt1\");\r\n            grass2Src = getImageSrcFromType(\"terrain/redgrass2\");\r\n            dirt2Src = getImageSrcFromType(\"terrain/reddirt2\");\r\n            break;\r\n        case 3:\r\n            grass1Src = getImageSrcFromType(\"terrain/pinkgrass1\");\r\n            dirt1Src = getImageSrcFromType(\"terrain/pinkdirt1\");\r\n            grass2Src = getImageSrcFromType(\"terrain/pinkgrass2\");\r\n            dirt2Src = getImageSrcFromType(\"terrain/pinkdirt2\");\r\n            break;   \r\n    }\r\n    \r\n    if((columns % 2) == 0){\r\n\r\n        if (index >= columns && index < columns*2) {\r\n            index++;\r\n        }\r\n\r\n        if (index >= columns*3 && index < columns*4) {\r\n            index++;\r\n        }\r\n\r\n        if (index >= columns*5 && index < columns*6) {\r\n            index++;\r\n        } \r\n    }\r\n    \r\n    if((index % 2) == 0){\r\n        color2 = true;\r\n    }\r\n\r\n    return(\r\n    <div>\r\n        <motion.div\r\n        whileHover={{ y: -20 }}\r\n        whileTap={{ y: 500 }}\r\n        initial={{scale: 0}}\r\n        animate={{scale: 1}}\r\n        exit={{scale: 0}}\r\n        transition={{ ease: \"easeInOut\", duration: 0.3 }} \r\n        className={`${visibility && (color2 ? 'terrainStyle1' : 'terrainNone')}`}>\r\n            <img className='terrainBg' src = {grass1Src} />\r\n            <div className={`${(visibility && (iconSrc != '') && (iconSrc == 'characters/skeleton1s' || iconSrc == 'characters/skeleton2s' || iconSrc == 'characters/knight1s' || iconSrc == 'characters/knight2s') ? 'elementBossContainer' : 'elementContainer')}`}>\r\n                <img className={`${(visibility && (iconSrc != '') && 'imgIconContainer')}`} src={elementIconSrc} alt=\"\"/>\r\n            </div>\r\n            <div className={`${(visibility ? 'dirtContainer1': 'terrainNone')}`}>\r\n                <img className='dirtBg' src = {dirt1Src} />\r\n            </div>\r\n        </motion.div>\r\n        <motion.div\r\n        whileHover={{ y: -20 }}\r\n        whileTap={{ y: 500 }}\r\n        initial={{scale: 0}}\r\n        animate={{scale: 1}}\r\n        exit={{scale: 0}}\r\n        transition={{ ease: \"easeInOut\", duration: 0.3 }} \r\n        className={`${visibility && (!color2 ? 'terrainStyle2' : 'terrainNone')}`}>\r\n            <img className='terrainBg' src = {grass2Src}  />\r\n            <div className={`${(visibility && (iconSrc != '') && (iconSrc == 'characters/skeleton1s' || iconSrc == 'characters/skeleton2s' || iconSrc == 'characters/knight1s' || iconSrc == 'characters/knight2s') ? 'elementBossContainer' : 'elementContainer')}`}>\r\n                <img className={`${(visibility && (iconSrc != '') && 'imgIconContainer')}`} src={elementIconSrc} alt=\"\"/>\r\n            </div>\r\n            <div className={`${(visibility ? 'dirtContainer2': 'terrainNone')}`}>\r\n                <img className='dirtBg' src = {dirt2Src} />\r\n            </div>\r\n        </motion.div>\r\n    </div>);\r\n\r\n}","import React from 'react';\r\nimport { MapTerrain } from '../../components/MapTerrain/MapTerrain';\r\nimport { TerrainType } from '../../utils/TerrainType';\r\nimport { getImageSrcFromType } from '../../utils/getImageSrcFromType';\r\nimport './Display.css'\r\n\r\n{/*const initial = [\r\n    {\r\n        index: 0,\r\n        type: '',\r\n        visibility: true,\r\n        potion: false,\r\n        sword: false,\r\n        shield: false,\r\n        boss: false,\r\n        bossType: 0,\r\n        player: false,\r\n    },\r\n    {\r\n        index: 1,\r\n        type: '',\r\n        visibility: true,\r\n        potion: false,\r\n        sword: false,\r\n        shield: false,\r\n        boss: false,\r\n        bossType: 0,\r\n        player: false,\r\n    },\r\n    {\r\n        index: 2,\r\n        type: '',\r\n        visibility: true,\r\n        potion: false,\r\n        sword: false,\r\n        shield: false,\r\n        boss: false,\r\n        bossType: 0,\r\n        player: false,\r\n    },\r\n    {\r\n        index: 3,\r\n        type: '',\r\n        visibility: true,\r\n        potion: false,\r\n        sword: false,\r\n        shield: false,\r\n        boss: false,\r\n        bossType: 0,\r\n        player: false,\r\n    },\r\n    {\r\n        index: 4,\r\n        type: '',\r\n        visibility: true,\r\n        potion: false,\r\n        sword: false,\r\n        shield: false,\r\n        boss: false,\r\n        bossType: 0,\r\n        player: false,\r\n    },\r\n    {\r\n        index: 5,\r\n        type: '',\r\n        visibility: true,\r\n        potion: false,\r\n        sword: false,\r\n        shield: false,\r\n        boss: false,\r\n        bossType: 0,\r\n        player: false,\r\n    },\r\n    {\r\n        index: 6,\r\n        type: '',\r\n        visibility: true,\r\n        potion: false,\r\n        sword: false,\r\n        shield: false,\r\n        boss: false,\r\n        bossType: 0,\r\n        player: false,\r\n    },\r\n    {\r\n        index: 7,\r\n        type: '',\r\n        visibility: true,\r\n        potion: false,\r\n        sword: false,\r\n        shield: false,\r\n        boss: false,\r\n        bossType: 0,\r\n        player: false,\r\n    },\r\n    {\r\n        index: 8,\r\n        type: '',\r\n        visibility: true,\r\n        potion: false,\r\n        sword: false,\r\n        shield: false,\r\n        boss: false,\r\n        bossType: 0,\r\n        player: false,\r\n    },\r\n    {\r\n        index: 9,\r\n        type: '',\r\n        visibility: true,\r\n        potion: false,\r\n        sword: false,\r\n        shield: false,\r\n        boss: false,\r\n        bossType: 0,\r\n        player: false,\r\n    },\r\n    {\r\n        index: 10,\r\n        type: '',\r\n        visibility: true,\r\n        potion: false,\r\n        sword: false,\r\n        shield: false,\r\n        boss: false,\r\n        bossType: 0,\r\n        player: false,\r\n    },\r\n    {\r\n        index: 11,\r\n        type: '',\r\n        visibility: true,\r\n        potion: false,\r\n        sword: false,\r\n        shield: false,\r\n        boss: false,\r\n        bossType: 0,\r\n        player: false,\r\n    },\r\n    {\r\n        index: 12,\r\n        type: '',\r\n        visibility: true,\r\n        potion: false,\r\n        sword: false,\r\n        shield: false,\r\n        boss: false,\r\n        bossType: 0,\r\n        player: false,\r\n    },\r\n    {\r\n        index: 13,\r\n        type: '',\r\n        visibility: true,\r\n        potion: false,\r\n        sword: false,\r\n        shield: false,\r\n        boss: false,\r\n        bossType: 0,\r\n        player: false,\r\n    },\r\n    {\r\n        index: 14,\r\n        type: '',\r\n        visibility: true,\r\n        potion: false,\r\n        sword: false,\r\n        shield: false,\r\n        boss: false,\r\n        bossType: 0,\r\n        player: false,\r\n    },\r\n    {\r\n        index: 15,\r\n        type: '',\r\n        visibility: true,\r\n        potion: false,\r\n        sword: false,\r\n        shield: false,\r\n        boss: false,\r\n        bossType: 0,\r\n        player: false,\r\n    },\r\n    {\r\n        index: 16,\r\n        type: '',\r\n        visibility: true,\r\n        potion: false,\r\n        sword: false,\r\n        shield: false,\r\n        boss: false,\r\n        bossType: 0,\r\n        player: false,\r\n    },\r\n    {\r\n        index: 17,\r\n        type: '',\r\n        visibility: true,\r\n        potion: false,\r\n        sword: false,\r\n        shield: false,\r\n        boss: false,\r\n        bossType: 0,\r\n        player: false,\r\n    },\r\n    {\r\n        index: 18,\r\n        type: '',\r\n        visibility: true,\r\n        potion: false,\r\n        sword: false,\r\n        shield: false,\r\n        boss: false,\r\n        bossType: 0,\r\n        player: false,\r\n    },\r\n    {\r\n        index: 19,\r\n        type: '',\r\n        visibility: true,\r\n        potion: false,\r\n        sword: false,\r\n        shield: false,\r\n        boss: false,\r\n        bossType: 0,\r\n        player: false,\r\n    },\r\n    {\r\n        index: 20,\r\n        type: '',\r\n        visibility: true,\r\n        potion: false,\r\n        sword: false,\r\n        shield: false,\r\n        boss: false,\r\n        bossType: 0,\r\n        player: false,\r\n    },\r\n    {\r\n        index: 21,\r\n        type: '',\r\n        visibility: true,\r\n        potion: false,\r\n        sword: false,\r\n        shield: false,\r\n        boss: false,\r\n        bossType: 0,\r\n        player: false,\r\n    },\r\n    {\r\n        index: 0,\r\n        type: '',\r\n        visibility: true,\r\n        potion: false,\r\n        sword: false,\r\n        shield: false,\r\n        boss: false,\r\n        bossType: 0,\r\n        player: false,\r\n    },\r\n    {\r\n        index: 1,\r\n        type: '',\r\n        visibility: true,\r\n        potion: false,\r\n        sword: false,\r\n        shield: false,\r\n        boss: false,\r\n        bossType: 0,\r\n        player: false,\r\n    },\r\n    {\r\n        index: 2,\r\n        type: '',\r\n        visibility: true,\r\n        potion: false,\r\n        sword: false,\r\n        shield: false,\r\n        boss: false,\r\n        bossType: 0,\r\n        player: false,\r\n    },\r\n    {\r\n        index: 3,\r\n        type: '',\r\n        visibility: true,\r\n        potion: false,\r\n        sword: false,\r\n        shield: false,\r\n        boss: false,\r\n        bossType: 0,\r\n        player: false,\r\n    },\r\n    {\r\n        index: 4,\r\n        type: '',\r\n        visibility: true,\r\n        potion: false,\r\n        sword: false,\r\n        shield: false,\r\n        boss: false,\r\n        bossType: 0,\r\n        player: false,\r\n    },\r\n    {\r\n        index: 5,\r\n        type: '',\r\n        visibility: true,\r\n        potion: false,\r\n        sword: false,\r\n        shield: false,\r\n        boss: false,\r\n        bossType: 0,\r\n        player: false,\r\n    },\r\n    {\r\n        index: 6,\r\n        type: '',\r\n        visibility: true,\r\n        potion: false,\r\n        sword: false,\r\n        shield: false,\r\n        boss: false,\r\n        bossType: 0,\r\n        player: false,\r\n    },\r\n    {\r\n        index: 7,\r\n        type: '',\r\n        visibility: true,\r\n        potion: false,\r\n        sword: false,\r\n        shield: false,\r\n        boss: false,\r\n        bossType: 0,\r\n        player: false,\r\n    },\r\n    {\r\n        index: 8,\r\n        type: '',\r\n        visibility: true,\r\n        potion: false,\r\n        sword: false,\r\n        shield: false,\r\n        boss: false,\r\n        bossType: 0,\r\n        player: false,\r\n    },\r\n    {\r\n        index: 9,\r\n        type: '',\r\n        visibility: true,\r\n        potion: false,\r\n        sword: false,\r\n        shield: false,\r\n        boss: false,\r\n        bossType: 0,\r\n        player: false,\r\n    },\r\n    {\r\n        index: 10,\r\n        type: '',\r\n        visibility: true,\r\n        potion: false,\r\n        sword: false,\r\n        shield: false,\r\n        boss: false,\r\n        bossType: 0,\r\n        player: false,\r\n    },\r\n    {\r\n        index: 11,\r\n        type: '',\r\n        visibility: true,\r\n        potion: false,\r\n        sword: false,\r\n        shield: false,\r\n        boss: false,\r\n        bossType: 0,\r\n        player: false,\r\n    },\r\n    {\r\n        index: 12,\r\n        type: '',\r\n        visibility: true,\r\n        potion: false,\r\n        sword: false,\r\n        shield: false,\r\n        boss: false,\r\n        bossType: 0,\r\n        player: false,\r\n    },\r\n    {\r\n        index: 13,\r\n        type: '',\r\n        visibility: true,\r\n        potion: false,\r\n        sword: false,\r\n        shield: false,\r\n        boss: false,\r\n        bossType: 0,\r\n        player: false,\r\n    },\r\n    {\r\n        index: 14,\r\n        type: '',\r\n        visibility: true,\r\n        potion: false,\r\n        sword: false,\r\n        shield: false,\r\n        boss: false,\r\n        bossType: 0,\r\n        player: false,\r\n    },\r\n    {\r\n        index: 15,\r\n        type: '',\r\n        visibility: true,\r\n        potion: false,\r\n        sword: false,\r\n        shield: false,\r\n        boss: false,\r\n        bossType: 0,\r\n        player: false,\r\n    },\r\n    {\r\n        index: 16,\r\n        type: '',\r\n        visibility: true,\r\n        potion: false,\r\n        sword: false,\r\n        shield: false,\r\n        boss: false,\r\n        bossType: 0,\r\n        player: false,\r\n    },\r\n    {\r\n        index: 17,\r\n        type: '',\r\n        visibility: true,\r\n        potion: false,\r\n        sword: false,\r\n        shield: false,\r\n        boss: false,\r\n        bossType: 0,\r\n        player: false,\r\n    },\r\n    {\r\n        index: 18,\r\n        type: '',\r\n        visibility: true,\r\n        potion: false,\r\n        sword: false,\r\n        shield: false,\r\n        boss: false,\r\n        bossType: 0,\r\n        player: false,\r\n    },\r\n    {\r\n        index: 19,\r\n        type: '',\r\n        visibility: true,\r\n        potion: false,\r\n        sword: false,\r\n        shield: false,\r\n        boss: false,\r\n        bossType: 0,\r\n        player: false,\r\n    },\r\n    {\r\n        index: 20,\r\n        type: '',\r\n        visibility: true,\r\n        potion: false,\r\n        sword: false,\r\n        shield: false,\r\n        boss: false,\r\n        bossType: 0,\r\n        player: false,\r\n    },\r\n    {\r\n        index: 21,\r\n        type: '',\r\n        visibility: true,\r\n        potion: false,\r\n        sword: false,\r\n        shield: false,\r\n        boss: false,\r\n        bossType: 0,\r\n        player: false,\r\n    },\r\n    {\r\n        index: 0,\r\n        type: '',\r\n        visibility: true,\r\n        potion: false,\r\n        sword: false,\r\n        shield: false,\r\n        boss: false,\r\n        bossType: 0,\r\n        player: false,\r\n    },\r\n    {\r\n        index: 1,\r\n        type: '',\r\n        visibility: true,\r\n        potion: false,\r\n        sword: false,\r\n        shield: false,\r\n        boss: false,\r\n        bossType: 0,\r\n        player: false,\r\n    },\r\n    {\r\n        index: 2,\r\n        type: '',\r\n        visibility: true,\r\n        potion: false,\r\n        sword: false,\r\n        shield: false,\r\n        boss: false,\r\n        bossType: 0,\r\n        player: false,\r\n    },\r\n    {\r\n        index: 3,\r\n        type: '',\r\n        visibility: true,\r\n        potion: false,\r\n        sword: false,\r\n        shield: false,\r\n        boss: false,\r\n        bossType: 0,\r\n        player: false,\r\n    },\r\n    {\r\n        index: 4,\r\n        type: '',\r\n        visibility: true,\r\n        potion: false,\r\n        sword: false,\r\n        shield: false,\r\n        boss: false,\r\n        bossType: 0,\r\n        player: false,\r\n    },\r\n    {\r\n        index: 5,\r\n        type: '',\r\n        visibility: true,\r\n        potion: false,\r\n        sword: false,\r\n        shield: false,\r\n        boss: false,\r\n        bossType: 0,\r\n        player: false,\r\n    },\r\n    {\r\n        index: 6,\r\n        type: '',\r\n        visibility: true,\r\n        potion: false,\r\n        sword: false,\r\n        shield: false,\r\n        boss: false,\r\n        bossType: 0,\r\n        player: false,\r\n    },\r\n    {\r\n        index: 7,\r\n        type: '',\r\n        visibility: true,\r\n        potion: false,\r\n        sword: false,\r\n        shield: false,\r\n        boss: false,\r\n        bossType: 0,\r\n        player: false,\r\n    },\r\n    {\r\n        index: 8,\r\n        type: '',\r\n        visibility: true,\r\n        potion: false,\r\n        sword: false,\r\n        shield: false,\r\n        boss: false,\r\n        bossType: 0,\r\n        player: false,\r\n    },\r\n    {\r\n        index: 9,\r\n        type: '',\r\n        visibility: true,\r\n        potion: false,\r\n        sword: false,\r\n        shield: false,\r\n        boss: false,\r\n        bossType: 0,\r\n        player: false,\r\n    },\r\n    {\r\n        index: 10,\r\n        type: '',\r\n        visibility: true,\r\n        potion: false,\r\n        sword: false,\r\n        shield: false,\r\n        boss: false,\r\n        bossType: 0,\r\n        player: false,\r\n    },\r\n    {\r\n        index: 11,\r\n        type: '',\r\n        visibility: true,\r\n        potion: false,\r\n        sword: false,\r\n        shield: false,\r\n        boss: false,\r\n        bossType: 0,\r\n        player: false,\r\n    },\r\n    {\r\n        index: 12,\r\n        type: '',\r\n        visibility: true,\r\n        potion: false,\r\n        sword: false,\r\n        shield: false,\r\n        boss: false,\r\n        bossType: 0,\r\n        player: false,\r\n    },\r\n    {\r\n        index: 13,\r\n        type: '',\r\n        visibility: true,\r\n        potion: false,\r\n        sword: false,\r\n        shield: false,\r\n        boss: false,\r\n        bossType: 0,\r\n        player: false,\r\n    },\r\n    {\r\n        index: 14,\r\n        type: '',\r\n        visibility: true,\r\n        potion: false,\r\n        sword: false,\r\n        shield: false,\r\n        boss: false,\r\n        bossType: 0,\r\n        player: false,\r\n    },\r\n    {\r\n        index: 15,\r\n        type: '',\r\n        visibility: true,\r\n        potion: false,\r\n        sword: false,\r\n        shield: false,\r\n        boss: false,\r\n        bossType: 0,\r\n        player: false,\r\n    },\r\n    {\r\n        index: 16,\r\n        type: '',\r\n        visibility: true,\r\n        potion: false,\r\n        sword: false,\r\n        shield: false,\r\n        boss: false,\r\n        bossType: 0,\r\n        player: false,\r\n    },\r\n    {\r\n        index: 17,\r\n        type: '',\r\n        visibility: true,\r\n        potion: false,\r\n        sword: false,\r\n        shield: false,\r\n        boss: false,\r\n        bossType: 0,\r\n        player: false,\r\n    },\r\n    {\r\n        index: 18,\r\n        type: '',\r\n        visibility: true,\r\n        potion: false,\r\n        sword: false,\r\n        shield: false,\r\n        boss: false,\r\n        bossType: 0,\r\n        player: false,\r\n    },\r\n    {\r\n        index: 19,\r\n        type: '',\r\n        visibility: true,\r\n        potion: false,\r\n        sword: false,\r\n        shield: false,\r\n        boss: false,\r\n        bossType: 0,\r\n        player: false,\r\n    },\r\n    {\r\n        index: 20,\r\n        type: '',\r\n        visibility: true,\r\n        potion: false,\r\n        sword: false,\r\n        shield: false,\r\n        boss: false,\r\n        bossType: 0,\r\n        player: false,\r\n    },\r\n    {\r\n        index: 21,\r\n        type: '',\r\n        visibility: true,\r\n        potion: false,\r\n        sword: false,\r\n        shield: false,\r\n        boss: false,\r\n        bossType: 0,\r\n        player: false,\r\n    },\r\n]*/}\r\n\r\ninterface DisplayProps{\r\n    rows: number,\r\n    columns: number,\r\n    terrains: TerrainType[],\r\n}\r\n\r\nexport const Display: React.FC<DisplayProps> = ( {rows, columns, terrains} ) => {\r\n\r\n    const displayBgImgSrc = getImageSrcFromType(\"displaybg\");\r\n\r\n    return(\r\n        <div className='displayContainer' style={{gridTemplateColumns: `repeat(${columns}, 62px)`, gridTemplateRows: `repeat(${rows}, 62px)`}}>\r\n            <img className='displayBg' src = {displayBgImgSrc} />\r\n           {terrains.map(({ index, type, visibility, iconSrc }) => {\r\n               return <MapTerrain\r\n               rows = {rows}\r\n               columns = {columns}\r\n               index = {index}\r\n               type = {type}\r\n               visibility = {visibility}\r\n               iconSrc = {iconSrc}\r\n               ></MapTerrain>\r\n           })}\r\n        </div>\r\n    );\r\n}","import React from 'react';\r\nimport './MatrixButton.css';\r\nimport { TerrainType } from '../../utils/TerrainType';\r\n\r\ninterface MatrixButtonProps{\r\n    index: number\r\n    globalBossIndex: number,\r\n    globalPotionIndex: number,\r\n    globalShieldIndex: number,\r\n    globalSwordIndex: number,\r\n    currentValue: number,\r\n    terrains: TerrainType[],\r\n    onClick: () => void;\r\n}\r\n\r\nexport const MatrixButton: React.FC<MatrixButtonProps> = ( { index, globalBossIndex, globalPotionIndex, globalShieldIndex, globalSwordIndex, currentValue, terrains, onClick} ) => {\r\n\r\n    const [ activeLink, setactiveLink ] = React.useState(false);\r\n\r\n    const handleBtnClick = () => {\r\n        setactiveLink(!activeLink);\r\n        onClick();\r\n    }\r\n    //{`${((globalBossIndex != -1 && globalBossIndex == index) || (globalPotionIndex !=-1 && globalPotionIndex == index) || (globalShieldIndex !=-1 && globalShieldIndex == index) || (globalSwordIndex != -1 && globalSwordIndex == index)) ? 'matrixButtons__Selected' : 'matrixButtons'}`}\r\n    return(\r\n        <button className={`${(activeLink) && (terrains[currentValue].visibility && ((globalBossIndex != -1 && globalBossIndex == index) || (globalPotionIndex !=-1 && globalPotionIndex == index) || (globalShieldIndex !=-1 && globalShieldIndex == index) || (globalSwordIndex != -1 && globalSwordIndex == index))) ? 'matrixButtons__Selected' : 'matrixButtons'}`} onClick={handleBtnClick} value={currentValue}></button>\r\n    );\r\n} ","import React from 'react';\r\nimport { MatrixButton } from '../MatrixButton/MatrixButton';\r\nimport { TerrainType } from '../../utils/TerrainType';\r\nimport './Matrix.css';\r\n\r\ninterface MatrixProps{\r\n    rows: number,\r\n    columns: number,\r\n    onMatrixClick: (index: number, type: string) => void;\r\n    type: string,\r\n    globalBossIndex: number,\r\n    globalPotionIndex: number,\r\n    globalShieldIndex: number,\r\n    globalSwordIndex: number,\r\n    terrains: TerrainType[]\r\n}\r\n\r\nexport const Matrix: React.FC<MatrixProps> = ( { rows, columns, onMatrixClick, type, globalBossIndex, globalPotionIndex, globalShieldIndex, globalSwordIndex, terrains} ) => {\r\n\r\n    var buttons = [];\r\n    \r\n    for (let i = 0; i < ( rows * columns); i++) {\r\n        var newButton = i;\r\n        buttons.push(newButton);\r\n    }\r\n     \r\n    return(\r\n        <div className='matrixButtonsContainer' style={{gridTemplateColumns: `repeat(${columns}, 25px)`, gridTemplateRows: `repeat(${rows}, 25px)`}}>\r\n            {buttons.map(function(currentValue) {\r\n                \r\n                const handleClick = () => {\r\n                    onMatrixClick(currentValue, type);\r\n                } \r\n            return <MatrixButton\r\n                index = {currentValue}\r\n                onClick = {handleClick}\r\n                currentValue = {currentValue}\r\n                globalBossIndex = {globalBossIndex}\r\n                globalPotionIndex = {globalPotionIndex}\r\n                globalShieldIndex = {globalShieldIndex}\r\n                globalSwordIndex = {globalSwordIndex}\r\n                terrains = {terrains}\r\n                ></MatrixButton>\r\n            })}\r\n        </div>\r\n    );\r\n} ","import React from 'react'\r\nimport { motion } from 'framer-motion';\r\nimport { getImageSrcFromType } from '../../utils/getImageSrcFromType';\r\nimport { Matrix } from '../Matrix/Matrix';\r\nimport { TerrainType } from '../../utils/TerrainType';\r\nimport './Map.css';\r\n\r\ninterface MapProps {\r\n    mapType: string,\r\n    rows: number,\r\n    columns: number,\r\n    globalBossIndex: number,\r\n    globalPotionIndex: number,\r\n    globalShieldIndex: number,\r\n    globalSwordIndex: number,\r\n    terrains: TerrainType[],\r\n    onRowsDecrease: () => void;\r\n    onRowsIncrease: () => void;\r\n    onColumnDecrease: () => void;\r\n    onColumnIncrease: () => void;\r\n    onMatrixChange: () => void;\r\n    onVisibilityChange: (index: number) => void;\r\n    onTerrainTypeChange: (terrainType: number) => void;\r\n}\r\n\r\nexport const Map: React.FC<MapProps> = ( { mapType, rows, columns, globalBossIndex, globalPotionIndex, globalShieldIndex, globalSwordIndex, terrains, onRowsDecrease, onRowsIncrease, onColumnDecrease, onColumnIncrease, onMatrixChange, onVisibilityChange, onTerrainTypeChange } ) => {\r\n\r\n    const leftarrowImgSrc = getImageSrcFromType(\"leftarrow\");\r\n    const rightarrowImgSrc = getImageSrcFromType(\"rightarrow\");\r\n\r\n    const greenTerrainImgSrc = getImageSrcFromType(\"terrain/greenterrain\");\r\n    const blueTerrainImgSrc = getImageSrcFromType(\"terrain/blueterrain\");\r\n    const redTerrainImgSrc = getImageSrcFromType(\"terrain/redterrain\");\r\n    const pinkTerrainImgSrc = getImageSrcFromType(\"terrain/pinkterrain\");\r\n\r\n    const handleClick0 = () => {\r\n        onTerrainTypeChange(0);\r\n    } \r\n\r\n    const handleClick1 = () => {\r\n        onTerrainTypeChange(1);\r\n    } \r\n\r\n    const handleClick2 = () => {\r\n        onTerrainTypeChange(2);\r\n    } \r\n\r\n    const handleClick3 = () => {\r\n        onTerrainTypeChange(3);\r\n    } \r\n\r\n    return(\r\n        <div className='mainMapContainer'>\r\n            <div className='rowsColumnsNumberContainer'>\r\n                <div className='numbersContainer'>\r\n                    <div>Filas</div>\r\n                    <div className='numbersControl'>\r\n                        <motion.button \r\n                        whileHover={{ scale: 1.1 }}\r\n                        whileTap={{ scale: 0.9 }} \r\n                        onClick={onRowsDecrease} className='arrowBtn'>\r\n                            <img className='arrowBtnBg' src = {leftarrowImgSrc}/>\r\n                        </motion.button>\r\n                        <input type=\"text\" className='mapInput' value={rows} onChange={onMatrixChange}/>\r\n                        <motion.button \r\n                        whileHover={{ scale: 1.1 }}\r\n                        whileTap={{ scale: 0.9 }} \r\n                        onClick={onRowsIncrease} className='arrowBtn'>\r\n                            <img className='arrowBtnBg' src = {rightarrowImgSrc}/>\r\n                        </motion.button>\r\n                    </div>\r\n                </div>\r\n                <div className='numbersContainer'>\r\n                    <div>Columnas</div>\r\n                    <div className='numbersControl'>\r\n                        <motion.button \r\n                        whileHover={{ scale: 1.1 }}\r\n                        whileTap={{ scale: 0.9 }} \r\n                        onClick={onColumnDecrease} className='arrowBtn'>\r\n                            <img className='arrowBtnBg' src = {leftarrowImgSrc}/>\r\n                        </motion.button>\r\n                        <input type=\"text\" className='mapInput'value={columns}/>\r\n                        <motion.button \r\n                        whileHover={{ scale: 1.1 }}\r\n                        whileTap={{ scale: 0.9 }} \r\n                        onClick={onColumnIncrease} className='arrowBtn'>\r\n                            <img className='arrowBtnBg' src = {rightarrowImgSrc}/>\r\n                        </motion.button>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n            <div>\r\n                <p>Cambiar visibilidad del terreno</p>\r\n                <Matrix \r\n                rows = {rows}\r\n                columns = {columns}\r\n                onMatrixClick = {onVisibilityChange}\r\n                type = ''\r\n                globalBossIndex = {globalBossIndex}\r\n                globalPotionIndex = {globalPotionIndex}\r\n                globalShieldIndex = {globalShieldIndex}\r\n                globalSwordIndex = {globalSwordIndex}\r\n                terrains = {terrains}\r\n                ></Matrix>\r\n            </div>\r\n            <div className='terrainStylesContainer'>\r\n                <motion.button \r\n                whileHover={{ scale: 1.1 }}\r\n                whileTap={{ scale: 0.9 }}  \r\n                onClick={handleClick0}\r\n                className='mapStyleBtn'>\r\n                    <img className='mapBtnBg' src = {greenTerrainImgSrc}/>\r\n                </motion.button>\r\n                <motion.button \r\n                whileHover={{ scale: 1.1 }}\r\n                whileTap={{ scale: 0.9 }}  \r\n                onClick={handleClick1}\r\n                className='mapStyleBtn'>\r\n                    <img className='mapBtnBg' src = {blueTerrainImgSrc}/>\r\n                </motion.button>\r\n                <motion.button \r\n                whileHover={{ scale: 1.1 }}\r\n                whileTap={{ scale: 0.9 }}  \r\n                onClick={handleClick2}\r\n                className='mapStyleBtn'>\r\n                    <img className='mapBtnBg' src = {redTerrainImgSrc}/>\r\n                </motion.button>\r\n                <motion.button \r\n                whileHover={{ scale: 1.1 }}\r\n                whileTap={{ scale: 0.9 }}  \r\n                onClick={handleClick3}\r\n                className='mapStyleBtn'>\r\n                    <img className='mapBtnBg' src = {pinkTerrainImgSrc}/>\r\n                </motion.button>\r\n            </div>\r\n        </div>\r\n    );\r\n}","import React from 'react';\r\nimport { motion } from 'framer-motion';\r\nimport { Matrix } from '../Matrix/Matrix';\r\nimport { getImageSrcFromType } from '../../utils/getImageSrcFromType';\r\nimport { TerrainType } from '../../utils/TerrainType';\r\nimport './Boss.css';\r\n\r\ninterface BossProps{\r\n    bossType: string;\r\n    bossColor: number;\r\n    index: number;\r\n    rows: number,\r\n    columns: number,\r\n    globalBossIndex: number,\r\n    globalPotionIndex: number,\r\n    globalShieldIndex: number,\r\n    globalSwordIndex: number,\r\n    terrains: TerrainType[],\r\n    onBossPositionChange: (index:number) => void;\r\n    onBossTypeChange: (bossType: string) => void;\r\n}\r\n\r\nexport const Boss: React.FC<BossProps> = ( { rows, columns, bossType, globalBossIndex, globalPotionIndex, globalShieldIndex, globalSwordIndex, terrains, onBossPositionChange, onBossTypeChange} ) => {\r\n\r\n    const leftArrowImgSrc = getImageSrcFromType(\"leftarrow\");\r\n    const rightArrowImgSrc = getImageSrcFromType(\"rightarrow\");\r\n\r\n    const [ bossSettingsImgSrc, setBossSettingsImgSrc] = React.useState(\"characters/skeleton1\");\r\n    const [ bossIconSrc, setbossIconSrc ] = React.useState(bossSettingsImgSrc+\"s\");\r\n\r\n    const handleRightClick = () => {\r\n        switch (bossSettingsImgSrc) {\r\n            case \"characters/skeleton1\":\r\n                setBossSettingsImgSrc(\"characters/skeleton2\");\r\n                break;\r\n            case \"characters/skeleton2\":\r\n                setBossSettingsImgSrc(\"characters/knight1\");\r\n                break;\r\n            case \"characters/knight1\":\r\n                setBossSettingsImgSrc(\"characters/knight2\");\r\n                break;\r\n            case \"characters/knight2\":\r\n                setBossSettingsImgSrc(\"characters/skeleton1\");\r\n                break;\r\n        }\r\n    } \r\n\r\n    const handleLeftClick = () => {\r\n        switch (bossSettingsImgSrc) {\r\n            case \"characters/skeleton1\":\r\n                setBossSettingsImgSrc(\"characters/knight2\");\r\n                break;\r\n            case \"characters/knight2\":\r\n                setBossSettingsImgSrc(\"characters/knight1\");\r\n                break;\r\n            case \"characters/knight1\":\r\n                setBossSettingsImgSrc(\"characters/skeleton2\");\r\n                break;\r\n            case \"characters/skeleton2\":\r\n                setBossSettingsImgSrc(\"characters/skeleton1\");\r\n                break;\r\n        }\r\n    } \r\n\r\n    const handleBossIconSrc = (type: string) => {\r\n        setbossIconSrc(type);\r\n    }\r\n\r\n    React.useEffect(() => {\r\n        handleBossIconSrc(bossSettingsImgSrc+\"s\");\r\n        console.log(\"IconSrc :\"+bossSettingsImgSrc);\r\n        console.log(\"IconSrc :\"+bossIconSrc);\r\n        onBossTypeChange(bossIconSrc);\r\n    }, [ bossSettingsImgSrc ]);\r\n\r\n    return(\r\n    <div className='mainBossContainer'> \r\n        <div className = 'bossSettingsContainer'>\r\n            <motion.button \r\n            whileHover={{ scale: 1.1 }}\r\n            whileTap={{ scale: 0.9 }} \r\n            className = 'arrowBtn'\r\n            onClick={handleLeftClick}>\r\n                <img className='arrowBtnBg' src = {leftArrowImgSrc}/>\r\n            </motion.button >\r\n                <div className = 'bossImgContainer'>\r\n                    <img className='bossImg' src = {getImageSrcFromType(bossSettingsImgSrc)} />\r\n                </div>\r\n            <motion.button  \r\n            whileHover={{ scale: 1.1 }}\r\n            whileTap={{ scale: 0.9 }} \r\n            className = 'arrowBtn'\r\n            onClick={handleRightClick}>\r\n                <img className='arrowBtnBg' src = {rightArrowImgSrc}/>\r\n            </motion.button >\r\n        </div>\r\n        <div></div>\r\n        <Matrix\r\n        rows = {rows}\r\n        columns = {columns}\r\n        onMatrixClick = {onBossPositionChange}\r\n        type = {bossType}\r\n        globalBossIndex = {globalBossIndex}\r\n        globalPotionIndex = {globalPotionIndex}\r\n        globalShieldIndex = {globalShieldIndex}\r\n        globalSwordIndex = {globalSwordIndex}\r\n        terrains = {terrains}\r\n        ></Matrix>\r\n    </div>);\r\n} \r\n","import React from 'react';\r\nimport { getImageSrcFromType } from '../../utils/getImageSrcFromType';\r\nimport { Matrix } from '../Matrix/Matrix';\r\nimport { TerrainType } from '../../utils/TerrainType';\r\nimport './ElementFeatures.css';\r\n\r\ninterface ElementFeaturesProps{\r\n    rows: number,\r\n    columns: number,\r\n    onElementVisibilityChange: (index: number, type: string) => void;\r\n    type: string,\r\n    globalBossIndex: number,\r\n    globalPotionIndex: number,\r\n    globalShieldIndex: number,\r\n    globalSwordIndex: number,\r\n    terrains: TerrainType[],\r\n}\r\n\r\nexport const ElementFeatures: React.FC<ElementFeaturesProps> = ( { rows, columns, globalBossIndex, globalPotionIndex, globalShieldIndex, globalSwordIndex, onElementVisibilityChange, type, terrains } ) => {\r\n\r\n    return(\r\n        <div className = 'elementFeaturesMainContainer'>\r\n            <div>\r\n                <p className = 'elementMatrixText'>Seleccionar en el mapa la posición del elemento</p>\r\n                <Matrix \r\n                rows = {rows}\r\n                columns = {columns}\r\n                onMatrixClick = {onElementVisibilityChange}\r\n                type = {type}\r\n                globalBossIndex = {globalBossIndex}\r\n                globalPotionIndex = {globalPotionIndex}\r\n                globalShieldIndex = {globalShieldIndex}\r\n                globalSwordIndex = {globalSwordIndex}\r\n                terrains = {terrains}\r\n                ></Matrix>\r\n            </div>\r\n        </div>\r\n    );\r\n} ","import React from 'react'\r\nimport { getImageSrcFromType } from '../../utils/getImageSrcFromType';\r\nimport { ElementFeatures } from '../ElementFeatures/ElementFeatures';\r\nimport { Route, Redirect, Link } from 'react-router-dom';\r\nimport { TerrainType } from '../../utils/TerrainType';\r\nimport './Elements.css';\r\n\r\ninterface ElementsProps{\r\n    rows: number,\r\n    columns: number,\r\n    potion: string,\r\n    shield: string,\r\n    sword: string,\r\n    globalBossIndex: number,\r\n    globalPotionIndex: number,\r\n    globalShieldIndex: number,\r\n    globalSwordIndex: number,\r\n    terrains: TerrainType[],\r\n    onPotionIndexChange: (index: number, type: string) => void;\r\n    onShieldIndexChange: (index: number, type: string) => void;\r\n    onSwordIndexChange: (index: number, type: string) => void;\r\n}\r\n\r\nexport const Elements: React.FC<ElementsProps> = ( { rows, columns, potion, shield, sword,  globalBossIndex, globalPotionIndex, globalShieldIndex, globalSwordIndex, terrains, onPotionIndexChange, onShieldIndexChange, onSwordIndexChange } ) => {\r\n\r\n    const potionimageSrc = getImageSrcFromType(\"potion\");\r\n    const shieldimageSrc = getImageSrcFromType(\"shield\");\r\n    const swordimageSrc = getImageSrcFromType(\"sword\");\r\n\r\n    const [ activeLink, setactiveLink ] = React.useState(1);\r\n\r\n    const handlePotion = () => {\r\n        setactiveLink(1);\r\n    }\r\n    const handleShield = () => {\r\n        setactiveLink(2);\r\n    }\r\n    const handleSword = () => {\r\n        setactiveLink(3);\r\n    }\r\n\r\n    return(\r\n        <div className='mainElementsContainer'>\r\n            <div className = 'elementsButtonsContainer'>\r\n                <Link onClick={handlePotion} to=\"/elements/potion\" className={`${(activeLink == 1) ? 'elementBtnSelected' : 'elementBtn'}`}>\r\n                    <img className='elementIcon' src = {potionimageSrc}/>\r\n                </Link>\r\n                <Link onClick={handleShield} to=\"/elements/shield\"className={`${(activeLink == 2) ? 'elementBtnSelected' : 'elementBtn'}`}>\r\n                    <img className='elementIcon' src = {shieldimageSrc}/>\r\n                </Link>\r\n                <Link onClick={handleSword} to=\"/elements/sword\" className={`${(activeLink == 3) ? 'elementBtnSelected' : 'elementBtn'}`}>\r\n                    <img className='elementIcon' src = {swordimageSrc}/>\r\n                </Link>\r\n            </div>\r\n            <Redirect from='/elements' exact to='/elements/potion'></Redirect>\r\n            <Route path='/elements/potion' render={() => \r\n                <div className='mapSettingsContainer'>\r\n                    <ElementFeatures\r\n                    rows = {rows}\r\n                    columns = {columns}\r\n                    onElementVisibilityChange = {onPotionIndexChange}\r\n                    type = {potion}\r\n                    globalBossIndex = {globalBossIndex}\r\n                    globalPotionIndex = {globalPotionIndex}\r\n                    globalShieldIndex = {globalShieldIndex}\r\n                    globalSwordIndex = {globalSwordIndex}\r\n                    terrains = {terrains}\r\n                    ></ElementFeatures>\r\n                </div>}>\r\n            </Route>\r\n            <Route path='/elements/shield' render={() => \r\n                <div className='mapSettingsContainer'>\r\n                    <ElementFeatures\r\n                    rows = {rows}\r\n                    columns = {columns}\r\n                    onElementVisibilityChange = {onShieldIndexChange}\r\n                    type = {shield}\r\n                    globalBossIndex = {globalBossIndex}\r\n                    globalPotionIndex = {globalPotionIndex}\r\n                    globalShieldIndex = {globalShieldIndex}\r\n                    globalSwordIndex = {globalSwordIndex}\r\n                    terrains = {terrains}\r\n                    ></ElementFeatures>\r\n                </div>}>\r\n            </Route>\r\n            <Route path='/elements/sword' render={() => \r\n                <div className='mapSettingsContainer'>\r\n                    <ElementFeatures\r\n                    rows = {rows}\r\n                    columns = {columns}\r\n                    onElementVisibilityChange = {onSwordIndexChange}\r\n                    type = {sword}\r\n                    globalBossIndex = {globalBossIndex}\r\n                    globalPotionIndex = {globalPotionIndex}\r\n                    globalShieldIndex = {globalShieldIndex}\r\n                    globalSwordIndex = {globalSwordIndex}\r\n                    terrains = {terrains}\r\n                    ></ElementFeatures>\r\n                </div>}>\r\n            </Route>\r\n        </div>\r\n    );\r\n}","import React from 'react';\r\nimport './Settings.css'\r\nimport { Link, Redirect, Route } from 'react-router-dom';\r\nimport { motion } from 'framer-motion';\r\nimport { Map } from '../../components/Map/Map';\r\nimport { Boss } from '../../components/Boss/Boss';\r\nimport { Elements } from '../../components/Elements/Elements';\r\nimport { getImageSrcFromType } from '../../utils/getImageSrcFromType';\r\nimport { TerrainType } from '../../utils/TerrainType';\r\n\r\ninterface SettingsProps{\r\n    rows: number,\r\n    columns: number,\r\n    globalBossType: string,\r\n    globalBossIndex: number,\r\n    globalPotionIndex: number,\r\n    globalShieldIndex: number,\r\n    globalSwordIndex: number,\r\n    terrains: TerrainType[],\r\n    onRowsDecrease: () => void;\r\n    onRowsIncrease: () => void;\r\n    onColumnDecrease: () => void;\r\n    onColumnIncrease: () => void;\r\n    onMatrixChange: () => void;\r\n    onVisibilityChange: (index: number) => void;\r\n    onBossTypeChange: (bossType: string) => void;\r\n    onTerrainTypeChange: (terrainType: number) => void;\r\n    onBossIndexChange: (index: number) => void;\r\n    onPotionIndexChange: (index: number) => void;\r\n    onShieldIndexChange: (index: number) => void;\r\n    onSwordIndexChange: (index: number) => void;\r\n}\r\n\r\nexport const Settings: React.FC<SettingsProps> = ( {rows, columns, globalBossType, globalBossIndex, globalPotionIndex, globalShieldIndex, globalSwordIndex, terrains, onRowsDecrease, onRowsIncrease, onColumnDecrease, onColumnIncrease, onMatrixChange, onVisibilityChange, onTerrainTypeChange, onBossTypeChange, onBossIndexChange, onPotionIndexChange, onShieldIndexChange, onSwordIndexChange } ) => {\r\n\r\n    const [ activeLink, setactiveLink ] = React.useState(1);\r\n\r\n    const handleTerrainBtn = () => {\r\n        setactiveLink(1);\r\n    }\r\n    const handleBossBtn = () => {\r\n        setactiveLink(2);\r\n    }\r\n    const handleElementBtn = () => {\r\n        setactiveLink(3);\r\n    }\r\n\r\n    const terrainIconSrc = getImageSrcFromType(\"terrainicon\");\r\n    const bossIconSrc = getImageSrcFromType(\"/bossicon\");\r\n    const potionIconSrc = getImageSrcFromType(\"/potionicon\");\r\n\r\n\r\n    return(\r\n        <div className='settingsContainer'>\r\n            <div className='settingsButtons'>\r\n                {/* <button className='btnOn enemyBtn'></button>\r\n                <button className='btnOff mapBtn'></button>\r\n                <button className='btnOff elementsBtn'></button> */}\r\n                <Link onClick={handleTerrainBtn} to=\"/map\" className={`${(activeLink == 1) ? 'btnOn' : 'btnOff'}`}>\r\n                    <img className='linkIcon' src={terrainIconSrc} />\r\n                </Link>\r\n                <Link onClick={handleBossBtn} to=\"/boss\" className={`${(activeLink == 2) ? 'btnOn' : 'btnOff'}`}>\r\n                    <img className='linkIcon' src={bossIconSrc} />\r\n                </Link>\r\n                <Link onClick={handleElementBtn} to=\"/elements\" className={`${(activeLink == 3) ? 'btnOn' : 'btnOff'}`}>\r\n                    <img className='linkIcon' src={potionIconSrc} />\r\n                </Link>\r\n            </div>\r\n            <div className='settingsMenu'>\r\n                <Redirect from='/' exact to='/map'></Redirect>\r\n                    <Route path='/map' render={() => \r\n                        <motion.div \r\n                        initial={{opacity: 0}}\r\n                        animate={{opacity: 1}}\r\n                        exit={{opacity: 0}}\r\n                        transition={{duration: 0.3}}\r\n                        className='mapSettingsContainer'>\r\n                            <Map \r\n                            mapType = {''}\r\n                            rows = {rows}\r\n                            columns = {columns}\r\n                            globalBossIndex = {globalBossIndex}\r\n                            globalPotionIndex = {globalPotionIndex}\r\n                            globalShieldIndex = {globalShieldIndex}\r\n                            globalSwordIndex = {globalSwordIndex}\r\n                            terrains = {terrains}\r\n                            onRowsDecrease = {onRowsDecrease}\r\n                            onRowsIncrease = {onRowsIncrease}\r\n                            onColumnDecrease = {onColumnDecrease}\r\n                            onColumnIncrease = {onColumnIncrease}\r\n                            onMatrixChange = {onMatrixChange}\r\n                            onVisibilityChange = {onVisibilityChange}\r\n                            onTerrainTypeChange = {onTerrainTypeChange}\r\n                            ></Map>\r\n                        </motion.div>}>\r\n                    </Route>\r\n                    <Route path='/boss' render={() => \r\n                        <motion.div \r\n                        initial={{opacity: 0}}\r\n                        animate={{opacity: 1}}\r\n                        exit={{opacity: 0}}\r\n                        transition={{duration: 0.3}}className='bossSettingsContainer'>\r\n                            <Boss\r\n                            bossType = {globalBossType}\r\n                            bossColor = {0}\r\n                            index = {0}\r\n                            rows = {rows}\r\n                            columns = {columns}\r\n                            globalBossIndex = {globalBossIndex}\r\n                            globalPotionIndex = {globalPotionIndex}\r\n                            globalShieldIndex = {globalShieldIndex}\r\n                            globalSwordIndex = {globalSwordIndex}\r\n                            terrains = {terrains}\r\n                            onBossTypeChange = {onBossTypeChange}\r\n                            onBossPositionChange = {onBossIndexChange}\r\n                            ></Boss>\r\n                        </motion.div>}>\r\n                    </Route>\r\n                    <Route path='/elements' render={() => \r\n                        <motion.div \r\n                        initial={{opacity: 0}}\r\n                        animate={{opacity: 1}}\r\n                        exit={{opacity: 0}}\r\n                        transition={{duration: 0.3}}className='elementsSettingsContainer'>\r\n                           <Elements\r\n                           rows = {rows}\r\n                           columns = {columns}\r\n                           potion = {'potion'}\r\n                           shield = {'shield'}\r\n                           sword = {'sword'}\r\n                           globalPotionIndex = {globalPotionIndex}\r\n                           globalShieldIndex = {globalShieldIndex}\r\n                           globalSwordIndex = {globalSwordIndex}\r\n                           terrains = {terrains}\r\n                           onPotionIndexChange = {onPotionIndexChange}\r\n                           onShieldIndexChange = {onShieldIndexChange}\r\n                           onSwordIndexChange = {onSwordIndexChange}\r\n                           globalBossIndex = {globalBossIndex}\r\n                           ></Elements>\r\n                        </motion.div>}>\r\n                    </Route>\r\n                \r\n            </div>\r\n        </div>\r\n    );\r\n}","import React from 'react';\r\nimport { AnimatePresence, motion } from 'framer-motion';\r\nimport { Display } from '../../containers/Display/Display';\r\nimport { Settings } from '../../containers/Settings/Settings';\r\nimport { BrowserRouter, HashRouter } from 'react-router-dom';\r\nimport './App.css'\r\nimport { getImageSrcFromType } from '../../utils/getImageSrcFromType';\r\n\r\nconst initialMap = [\r\n    {\r\n        index: 0,\r\n        type: 0,\r\n        visibility: true,\r\n        iconSrc: '',\r\n    }\r\n];\r\n\r\nexport const App = () => {\r\n\r\n    const [ rows, setRows ] = React.useState(1);\r\n    const handleRowsDecrease = () => {\r\n        if(rows > 1){\r\n            setRows(rows-1);\r\n        }  \r\n    }\r\n    const handleRowsIncrease = () => {\r\n        if(rows < 6){\r\n            setRows(rows+1);\r\n        }  \r\n    }\r\n\r\n    const [ columns, setColumns ] = React.useState(1);\r\n    const handleColumnsDecrease = () => {\r\n        if(columns > 1){\r\n            setColumns(columns-1);\r\n        }  \r\n    }\r\n    const handleColumnsIncrease = () => {\r\n        if(columns < 11){\r\n            setColumns(columns+1);\r\n        }  \r\n    }\r\n\r\n    const [ terrains, setTerrains ] = React.useState(initialMap);\r\n    const [ globalTerrainType, setglobalTerrainType ] = React.useState(0);\r\n    const [ globalBossType, setglobalBossType ] = React.useState(\"characters/skeleton1s\");\r\n\r\n    const [ globalBossIndex, setGlobalBossIndex ] = React.useState(-1);\r\n    const [ globalPotionIndex, setGlobalPotionIndex ] = React.useState(-1);\r\n    const [ globalShieldIndex, setGlobalShieldIndex ] = React.useState(-1);\r\n    const [ globalSwordIndex, setGlobalSwordIndex ] = React.useState(-1);\r\n\r\n    const handleGlobalBossIndex = (index: number) => {\r\n        if(globalBossIndex == -1 || globalBossIndex != index){\r\n            setGlobalBossIndex(index);\r\n        }else if(globalBossIndex == index){\r\n            setGlobalBossIndex(-1);\r\n        }      \r\n    }\r\n\r\n    const handleGlobalPotionIndex = (index: number) => {\r\n        if(globalPotionIndex === -1 || globalPotionIndex != index){\r\n            setGlobalPotionIndex(index);\r\n        }else if(globalPotionIndex == index){\r\n            setGlobalPotionIndex(-1);\r\n        }   \r\n    }\r\n\r\n    const handleGlobalShieldIndex = (index: number) => {\r\n        if(globalShieldIndex == -1 || globalShieldIndex != index){\r\n            setGlobalShieldIndex(index);\r\n        }else if(globalShieldIndex == index){\r\n            setGlobalShieldIndex(-1);\r\n        }  \r\n    }\r\n\r\n    const handleGlobalSwordIndex = (index: number) => {\r\n        if(globalSwordIndex == -1 || globalSwordIndex != index){\r\n            setGlobalSwordIndex(index);\r\n        }else if(globalSwordIndex == index){\r\n            setGlobalSwordIndex(-1);\r\n        }  \r\n    }\r\n\r\n    const handleVisibilityChange = (index: number) => {\r\n        const i = terrains.findIndex((terrain) => {\r\n            return terrain.index === index;\r\n        });\r\n        const currentMap = terrains.slice();\r\n        currentMap[i].visibility = !currentMap[i].visibility;\r\n        setTerrains(currentMap);\r\n    }\r\n\r\n    const handleGlobalTerrainTypeChange = (numberType: number) => {\r\n        setglobalTerrainType(numberType);\r\n        const currentMap = terrains.slice();\r\n        for (let i = 0; i < currentMap.length; i++) {\r\n            currentMap[i].type = numberType;\r\n        }\r\n        setTerrains(currentMap);\r\n    }\r\n\r\n    const handleGlobalBossTypeChange = (url: string) => {\r\n        setglobalBossType(url);\r\n        const currentMap = terrains.slice();\r\n        if(globalBossIndex != -1){\r\n            currentMap[globalBossIndex].iconSrc = url;\r\n        }\r\n        setTerrains(currentMap);\r\n    }\r\n\r\n    const handleOnMatrixChange = () => {\r\n        var temporalTerrain = [];\r\n        var indexTerrain = 0;\r\n    \r\n        for (let i = 0; i < (rows * columns); i++) {\r\n            var currentIconSrc = '';\r\n\r\n            if(globalBossIndex == i && globalBossIndex != -1){\r\n                currentIconSrc = globalBossType;\r\n            }\r\n            if(globalPotionIndex == i && globalPotionIndex != -1){\r\n                currentIconSrc = 'potion';\r\n            }\r\n            if(globalShieldIndex == i && globalShieldIndex != -1){\r\n                currentIconSrc = 'shield';\r\n            }\r\n            if(globalSwordIndex == i && globalSwordIndex != -1){\r\n                currentIconSrc = 'sword';\r\n            }\r\n\r\n            const newTerrain = {\r\n            index: indexTerrain,\r\n            type: globalTerrainType,\r\n            visibility: true,\r\n            bossType:globalBossType,\r\n            iconSrc: currentIconSrc,\r\n            }; \r\n            indexTerrain ++;\r\n            temporalTerrain.push(newTerrain);\r\n        }\r\n        setTerrains(temporalTerrain);\r\n    }\r\n\r\n    const handleOnMatrixColumnsChange = () => {\r\n        const temporalTerrain = terrains.slice();\r\n        var terrainsNumber = rows * columns;\r\n        var terrainsNumberDifference = 0;\r\n        var increase = false\r\n        if (temporalTerrain.length > terrainsNumber) {\r\n           terrainsNumberDifference = temporalTerrain.length - terrainsNumber;\r\n        }else{\r\n            terrainsNumberDifference = terrainsNumber - temporalTerrain.length;\r\n            increase = true;\r\n        }\r\n\r\n        for (let i = 0; i < columns; i++) {\r\n            if (increase) {\r\n                const newTerrain = {\r\n                index: 0,\r\n                type: 0,\r\n                visibility: true,\r\n                potion: false,\r\n                sword: false,\r\n                shield: false,\r\n                boss: false,\r\n                bossType: 'bossdefault',\r\n                player: false,\r\n                iconSrc: '',\r\n                };\r\n                var terrainCopy = temporalTerrain.slice();\r\n                temporalTerrain.push(newTerrain);    \r\n            }else{\r\n                temporalTerrain.pop();\r\n            } \r\n        }\r\n        setTerrains(temporalTerrain);\r\n    }\r\n\r\n    const handleOnMatrixRowsChange = () => {\r\n\r\n    }\r\n    \r\n    const handleIconChange = (terrainIndex: number, type: string) => {\r\n        const i = terrains.findIndex((terrain) => {\r\n            return terrain.index === terrainIndex;\r\n        });\r\n        const currentMap = terrains.slice();\r\n        if(terrainIndex != -1){\r\n            if(currentMap[i].iconSrc == ''){\r\n                currentMap[i].iconSrc = type;\r\n                for (let j = 0; j < currentMap.length; j++) {\r\n                    if (currentMap[j].iconSrc == type && i != j) {\r\n                        currentMap[j].iconSrc = '';\r\n                    }\r\n                }\r\n            }else if(currentMap[i].iconSrc == type){\r\n                currentMap[i].iconSrc = '';\r\n            }else if(currentMap[i].iconSrc != '' && currentMap[i].iconSrc != type){\r\n    \r\n            }   \r\n        }else{\r\n            for (let k = 0; k < currentMap.length; k++) {\r\n                if (currentMap[k].iconSrc == type) {\r\n                    currentMap[k].iconSrc = '';\r\n                }\r\n            }\r\n        }\r\n        setTerrains(currentMap);\r\n    }\r\n\r\n    React.useEffect(() => {\r\n        handleOnMatrixChange();\r\n    }, [ columns, rows ]);\r\n\r\n    React.useEffect(() => {\r\n        //handleIconChange(globalBossIndex, globalBossType);\r\n    }, [ globalBossType ]);\r\n\r\n    React.useEffect(() => {\r\n        handleIconChange(globalBossIndex, globalBossType);\r\n    }, [ globalBossIndex ]);\r\n\r\n    React.useEffect(() => {\r\n        handleIconChange(globalPotionIndex, 'potion');\r\n    }, [ globalPotionIndex ]);\r\n\r\n    React.useEffect(() => {\r\n        handleIconChange(globalShieldIndex, 'shield');\r\n    }, [ globalShieldIndex ]);\r\n\r\n    React.useEffect(() => {\r\n        handleIconChange(globalSwordIndex, 'sword');\r\n    }, [ globalSwordIndex ]);\r\n\r\n    const mainBg = getImageSrcFromType(\"mainbg\");\r\n\r\n    return(\r\n        <AnimatePresence exitBeforeEnter initial={true}>\r\n            <img className='displayMainBg' src = {mainBg} />\r\n            <main className='appMainContainer'>\r\n                <p className='appTittle'>Knights fight</p>\r\n                <main className='appContainer'>\r\n                    <HashRouter basename={process.env.PUBLIC_URL}>\r\n                    <Display\r\n                    rows = {rows}\r\n                    columns = {columns}\r\n                    terrains = {terrains}\r\n                    ></Display>\r\n                    <Settings\r\n                    rows = {rows}\r\n                    columns = {columns}\r\n                    globalBossType = {globalBossType}\r\n                    globalBossIndex = {globalBossIndex}\r\n                    globalPotionIndex = {globalPotionIndex}\r\n                    globalShieldIndex = {globalShieldIndex}\r\n                    globalSwordIndex = {globalSwordIndex}\r\n                    terrains = {terrains}\r\n                    onRowsDecrease = {handleRowsDecrease}\r\n                    onRowsIncrease = {handleRowsIncrease}\r\n                    onColumnDecrease = {handleColumnsDecrease}\r\n                    onColumnIncrease = {handleColumnsIncrease}\r\n                    onMatrixChange = {handleOnMatrixChange}\r\n                    onVisibilityChange = {handleVisibilityChange}\r\n                    onTerrainTypeChange = {handleGlobalTerrainTypeChange}\r\n                    onBossTypeChange = {handleGlobalBossTypeChange}\r\n                    onBossIndexChange = {handleGlobalBossIndex}\r\n                    onPotionIndexChange = {handleGlobalPotionIndex}\r\n                    onShieldIndexChange = {handleGlobalShieldIndex}\r\n                    onSwordIndexChange = {handleGlobalSwordIndex}\r\n                    ></Settings>\r\n                    </HashRouter>\r\n                </main>\r\n            </main> \r\n        </AnimatePresence>\r\n    );\r\n}","export default __webpack_public_path__ + \"static/media/pixeldigivolve.dfd41671.otf\";","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { App } from './containers/App/App';\nimport './fonts/pixeldigivolve/pixeldigivolve.otf';\nimport './index.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App></App>\n  </React.StrictMode>,\n  document.getElementById('root')\n);"],"sourceRoot":""}